#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/bf720c25-051e-4256-9a28-f67e329415f5 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float pHValue;
  float tdsValue;
  CloudLocation location;
  bool valveState;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#include <Arduino_MKRGPS.h>
#include "thingProperties.h"
#include <Servo.h>
#include <ArduinoGraphics.h>
#include <Arduino_LED_Matrix.h>
#include <Wire.h>
#include <TinyGPS++.h>


// Create ArduinoLEDMatrix and TinyGPS++ Object
ArduinoLEDMatrix matrix;
TinyGPSPlus gps;
float latitude;
float longitude;


// Define Pins
const int pHPin = A0;           // pH sensor pin
const int TdsPin = A1;         // ADC pin for TDS sensor 
const int servoPin = 9;

// pH Variables
//float pHValue = 0;            // Defined in thingProperties.h
float voltage = 0;              // Voltage from sensor
float neutralVoltage = 2.97;    // Voltage at pH 7 (calibrate this)
float sensitivity = 0.1;        // Voltage difference per pH unit (adjust this

// TDS Variables
//float tdsValue = 0;          // Defined in thingProperties.h
float tdsVoltage = 0;          // Voltage from TDS sensor
const float VREF = 3.3;        // Reference voltage for ESP32 ADC
float temperature = 25.0;      // Water temperature (in Celsius, assumed static)

// Servo Variables
Servo valveServo;
int pos = 0;

// LED matrix Frame
uint8_t frame[8][12] = {
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
};


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  delay(1500);               // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  Serial.println("Initializing Backpack Things...");
  
  matrix.begin();            // Begin Matrix
  matrix.clear();
  displayUNLV();
  matrix.renderBitmap(frame, 8, 12);
  
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(4);
  ArduinoCloud.printDebugInfo();

  // Initialize Pins
  pinMode(pHPin,INPUT);
  pinMode(TdsPin, INPUT);

  // Initialize GPS Serial Communication
  Serial1.begin(9600);
  Serial.println("GPS Initialized!");

  // Attach Servo Motor
  valveServo.attach(servoPin);
  closevalve();          // Ensures valve closed at startup
}

void loop() {
  ArduinoCloud.update();
  // Your code here 

  // Process GPS Data
  while (Serial1.available()) {
    char c = Serial1.read(); // Read GPS data
    if (gps.encode(c)) {
      updateGPSData(); // Process GPS data when updated
    }
  }
  
  //pH Section
  // Read and calculate pH
  int rawValue = analogRead(pHPin);
  voltage = rawValue * (3.3 / 4095.0);
  pHValue = 7 + ((neutralVoltage - voltage) / sensitivity);

  // TDS Section
  // Read and process TDS sensor data
  int rawTDS = analogRead(TdsPin);
  tdsVoltage = rawTDS * (VREF / 4095.0);
  // Convert voltage to TDS value
  float compensationCoefficient = 1.0 + 0.02 * (temperature - 25.0); // Temperature compensation
  float compensationVoltage = tdsVoltage / compensationCoefficient;
  tdsValue = (133.42 * pow(compensationVoltage, 3) -
              255.86 * pow(compensationVoltage, 2) +
              857.39 * compensationVoltage) * 0.5;

  // Print readings for debugging
  Serial.print("Raw Value: ");
  Serial.print(rawValue);
  Serial.print(" | Voltage: ");
  Serial.print(voltage, 2);
  Serial.print(" V | pH: ");
  Serial.println(pHValue, 2);
  Serial.print("TDS Value: ");
  Serial.print(tdsValue,0);
  Serial.println("ppm");  
  delay(1000);
}

void closevalve(){
  for(pos = 500; pos <= 1700; pos += 1){
    valveServo.writeMicroseconds(pos);
    delay(2);
  }
}

void openvalve(){
  for(pos = 1700; pos >= 500; pos-= 1){
    valveServo.writeMicroseconds(pos);
    delay(2);
  }
}

void updateGPSData() {
  if (gps.location.isUpdated()) {
    latitude = gps.location.lat();
    longitude = gps.location.lng();
    location = Location(latitude,longitude);

    // Debugging output
    Serial.print("Latitude: ");
    Serial.println(latitude, 6);
    Serial.print("Longitude: ");
    Serial.println(longitude, 6);
  } else {
    Serial.println("Waiting for GPS fix...");
  }
}

void displayUNLV(){
  // U
  frame[1][1] = 1;
  frame[2][1] = 1;
  frame[3][1] = 1;
  frame[3][2] = 1;
  frame[3][3] = 1;
  frame[3][4] = 1;
  frame[2][4] = 1;
  frame[1][4] = 1;

  // N
  frame[1][6] = 1;
  frame[2][6] = 1;
  frame[3][6] = 1;
  frame[1][7] = 1;
  frame[2][8] = 1;
  frame[3][9] = 1;
  frame[1][10] = 1;
  frame[2][10] = 1;
  frame[3][10] = 1;

  // L
  frame[5][1] = 1;
  frame[6][1] = 1;
  frame[7][1] = 1;
  frame[7][2] = 1;
  frame[7][3] = 1;
  frame[7][4] = 1;

  // V
  frame[5][6] = 1;
  frame[6][7] = 1;
  frame[7][8] = 1;
  frame[6][9] = 1;
  frame[5][10] = 1;
}


/*
  Since PHValue is READ_WRITE variable, onPHValueChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPHValueChange()  {
  // Add your code here to act upon PHValue change
}

/*
  Since TdsValue is READ_WRITE variable, onTdsValueChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTdsValueChange()  {
  // Add your code here to act upon TdsValue change
}

/*
  Since ValveState is READ_WRITE variable, onValveStateChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onValveStateChange()  {
  // Add your code here to act upon ValveState change
  if(valveState){
    openvalve(); // Open Valve
    Serial.println("Valve Opened");
  } else{
    closevalve(); // Close Valve
    Serial.println("Valve Closed");
  }
}

/*
  Since Location is READ_WRITE variable, onLocationChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLocationChange()  {
  // Add your code here to act upon Location change
}